package mybatis;

import hello.AccountType;
import hello.User;
import hello.UserAccounts;
import lombok.extern.slf4j.Slf4j;
import mybatis.dao.UserDao;
import mybatis.mapper.EmployeeMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMethod;

import java.math.BigDecimal;
import java.util.List;

@Slf4j
@Controller    // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)
public class UserController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EmployeeMapper employeeMapper;

    @GetMapping(path = "/find")
    public @ResponseBody
    User getOneUser(@RequestParam Long userId) {

        log.info("Get data: " + this.employeeMapper.findById(userId));
        return employeeMapper.findById(userId);
    }

    @GetMapping(path = "/getUserByName")
    public @ResponseBody
    List<User> getUserByName(@RequestParam String fullName) {

        List<User> results = employeeMapper.findByUserFullName(fullName);
        for (User item : results) {
            log.info("UserData: " + item.getUserFullName() + " -- address: " + item.getUserAddress());
        }
        return results;
    }

    UserDao userDao = new UserDao();

    @GetMapping(path = "/insertUser")
    public @ResponseBody
    String addNewUser(@RequestParam String fullName,
                      @RequestParam String userNip,
                      @RequestParam String userPesel,
                      @RequestParam String address,
                      @RequestParam String city) {

        User myUser = new User();
        myUser.setUserFullName(fullName);
        myUser.setUserNip(userNip);
        myUser.setUserPesel(userPesel);
        myUser.setUserAddress(address);
        myUser.setCity(city);

        userDao.save(myUser);
        return "New user data were added to DB successfully!!!";
    }

    @GetMapping(path = "/updateUser")
    public @ResponseBody
    String updateUserData(@RequestParam Long userId,
                          @RequestParam String fullName,
                          @RequestParam String userNip,
                          @RequestParam String userPesel,
                          @RequestParam String address,
                          @RequestParam String city) {

        User myUser = new User(userId, fullName, userNip, userPesel, address, city);
        userDao.update(myUser);
        return "User was updated successfully!!!";
    }


    @GetMapping(path = "/userAccounts")
    public @ResponseBody
    List<UserAccounts> getUserAccounts(@RequestParam Long userId) {
        return employeeMapper.findAccountsByUserId(userId);
    }

    @GetMapping(path = "/getAllAccounts")
    public @ResponseBody
    List<UserAccounts> getAllAccounts() {
        return employeeMapper.getAllAccounts();
    }

    @GetMapping(path = "/getAccountByNrb")
    public @ResponseBody
    UserAccounts getAccountData(@RequestParam String nrb) {
        return employeeMapper.getAccountByNumber(nrb);
    }

    @GetMapping(path = "/insertNrbForUser")
    public @ResponseBody
    long insertNrbData(@RequestParam int id,
                       @RequestParam String nrb,
                       @RequestParam AccountType type,
                       @RequestParam BigDecimal balance) {

        UserAccounts accountData = new UserAccounts(id, type, nrb, balance);
        employeeMapper.insertAccountData(accountData);

        return accountData.getAccountId();
    }

    @GetMapping(path = "/insertNrb")
    public @ResponseBody
    long insertNrb(@RequestParam int id,
                   @RequestParam AccountType type,
                   @RequestParam String nrb,
                   @RequestParam BigDecimal balance) {

        UserAccounts accountData = new UserAccounts(id, type, nrb, balance);
        employeeMapper.insertNewAccount(accountData);
        return accountData.getAccountId();
    }

    @RequestMapping(method = RequestMethod.GET, path = "/getAccountsForUser/{userId}")
    public @ResponseBody
    User getAccountsForUserById(@PathVariable long userId) {
        User userData = employeeMapper.getAllAccountsForUserById(userId);
        log.info("AccountsData: " + userData.getUserAccounts());
        return userData;
    }

    @GetMapping(path = "/getOneAccountAndUserData")
    public @ResponseBody
    UserAccounts getOneAccountAndUserData(@RequestParam String accountNrb) {
        return employeeMapper.getAccountAndUserData(accountNrb);
    }


    @GetMapping(path = "/getAccountsForUser2")
    public @ResponseBody
    User getMyAllUsers(@RequestParam long userId) {
        User userData = employeeMapper.getMyAllUsers(userId);
        log.info("AccountsData: " + userData.getUserAccounts());
        return userData;
    }
}
