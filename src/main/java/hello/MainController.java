package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;


@Controller    // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

//    @GetMapping(path = "/add") // Map ONLY GET Requests
//    public @ResponseBody
//    String addNewUser(@RequestParam String fullName,
//                      @RequestParam String userNip,
//                      @RequestParam String userPesel,
//                      @RequestParam String address,
//                      @RequestParam String city) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        User n = new User();
//        n.setUserFullName(fullName);
//        n.setUserNip(userNip);
//        n.setUserPesel(userPesel);
//        n.setUserAddress(address);
//        n.setCity(city);
//        userRepository.save(n);
//        return "Saved";
//    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path = "/find")
    public @ResponseBody
    User getOneUser(@RequestParam Long userId) {
        // This returns a JSON or XML with the users
        return userRepository.findOne(userId);
    }

    @GetMapping(path = "/getUserByName")
    public @ResponseBody
    List<User> getUserByName(@RequestParam String fullName) {
        return userRepository.findByUserFullName(fullName);
    }

    @GetMapping(path = "/getUserByCity")
    public @ResponseBody
    List<User> getUserByCity(@RequestParam String city) {
        return userRepository.findByCity(city);
    }

    @GetMapping(path = "/getUserByNameAndCity")
    public @ResponseBody
    List<User> getUserByNameAndCity(@RequestParam String fullName, @RequestParam String city) {
        return userRepository.findByUserFullNameAndCity(fullName, city);
    }

    @GetMapping(path = "/findByCityOrder")
    public @ResponseBody
    List<User> findUsersByCityOrderByName(@RequestParam String city) {
        return userRepository.findByCityOrderByUserFullName(city);
    }
}